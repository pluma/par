{"name":"par","tagline":"Simple partial function application.","body":"# Synopsis\r\n\r\n**par** is a JavaScript implementation of partial function application (sometimes incorrectly called \"currying\").\r\n\r\n[![browser support](https://ci.testling.com/pluma/par.png)](https://ci.testling.com/pluma/par)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/par.png?branch=master)](https://travis-ci.org/pluma/par) [![NPM version](https://badge.fury.io/js/par.png)](http://badge.fury.io/js/par)\r\n\r\n# How is this different from [`Function#bind`](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind)?\r\n\r\nThe primary purpose of `Function#bind` is to create a closure to preserve a function's context (the `this` variable). Most implementations, including the one in ES 5, also allow partial function application.\r\n\r\nThe functions provided by `par` also create closures, but they pass their own context along. This means `Function#apply`, `Function#call` and method invocation syntax still behave as expected (with the context being set accordingly).\r\n\r\nIf you don't care about contexts (e.g. the function you want to wrap doesn't use `this`), `lpartial` and `Function#bind` can be used interchangeably.\r\n\r\nThere is no native equivalent of `rpartial`.\r\n\r\nAnother important distinction is that unlike `Function#bind`, `par` works in environments that don't support ECMAScript 5, such as legacy versions of Internet Explorer (versions 8 and lower) or Rhino (e.g. the version bundled with Sun JDK 1.6).\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install par\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/par.git\r\ncd par\r\nnpm install\r\nmake && make dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/par\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install par\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/par/master/dist/par.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/par/master/dist/par.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/par/master/dist/par.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/par.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `par` module available in the global namespace.\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar par = require('par');\r\n\r\nfunction divideBy(x, y) {\r\n    return x / y;\r\n}\r\n\r\nvar divide4By = par(divideBy, 4);\r\nconsole.log(divide4By(10)); // 0.4\r\n\r\nvar divideBy4 = par.rpartial(divideBy, 4);\r\nconsole.log(divideBy4(10)); // 2.5\r\n```\r\n\r\n# Wrap-around example\r\n\r\n```javascript\r\nvar par = require('par');\r\n\r\nfunction say() {\r\n    // This assumes a modern browser or recent version of IE\r\n    console.log.apply(console, arguments);\r\n}\r\n\r\nsay('I love Internet Explorer!'); // \"I love Internet Explorer!\"\r\n\r\nvar sarcastic = par.rpartial(par(say, '[sarcasm]'), '[/sarcasm]');\r\n\r\nsarcastic('I love Internet Explorer!'); // \"[sarcasm] I love Internet Explorer! [/sarcasm]\"\r\n```\r\n\r\n# API\r\n\r\n## par(fn, args…):Function\r\n\r\nCreates a partially applied function that will append the initial arguments to the left-hand side of the argument list.\r\n\r\n## par.rpartial(fn, args…):Function\r\n\r\nCreates a partially applied function that will append the initial arguments to the right-hand side of the argument list.\r\n\r\n## par.lpartial(fn, args…):Function\r\n\r\nAlias for `par`.\r\n\r\n## par.partial(fn, args…):Function\r\n\r\nAlias for `par`. Deprecated in 0.1.3.\r\n\r\n# License\r\n\r\nThe MIT/Expat license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}